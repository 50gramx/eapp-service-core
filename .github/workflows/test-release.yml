name: Test Release System

on:
  workflow_dispatch:

jobs:
  test-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Python Domain
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/eapp-python-domain
          token: ${{ secrets.PROTOBUF_TOKEN || secrets.GITHUB_TOKEN }}
          path: eapp-python-domain

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install build setuptools wheel

      - name: Generate test package
        run: |
          cd eapp-python-domain
          
          # Create a unique version based on timestamp
          VERSION="25.7.8.$(date +%s)"
          echo "Using version: $VERSION"
          
          # Create a test package
          echo 'from setuptools import setup, find_packages' > setup.py
          echo 'setup(' >> setup.py
          echo '    name="eapp-python-domain",' >> setup.py
          echo "    version=\"$VERSION\"," >> setup.py
          echo '    description="Test package for GitHub releases",' >> setup.py
          echo '    packages=find_packages(where="src"),' >> setup.py
          echo '    package_dir={"": "src"},' >> setup.py
          echo '    python_requires=">=3.7",' >> setup.py
          echo ')' >> setup.py
          
          # Create source directory
          mkdir -p src/eapp_python_domain
          echo '# Test package' > src/eapp_python_domain/__init__.py
          
          # Show what we're about to build
          echo "Current directory: $(pwd)"
          echo "setup.py contents:"
          cat setup.py
          echo "Directory structure:"
          find . -type f -name "*.py" | head -10
          
          # Build package
          echo "Building package..."
          python -m build
          
          # List what files were created
          echo "Files created in dist/:"
          ls -la dist/ || echo "dist/ directory not found"
          
          # Check if files were created successfully
          TAR_COUNT=$(ls dist/*.tar.gz 2>/dev/null | wc -l)
          WHEEL_COUNT=$(ls dist/*.whl 2>/dev/null | wc -l)
          
          echo "Found $TAR_COUNT tar.gz files and $WHEEL_COUNT wheel files"
          
          if [ "$TAR_COUNT" -eq 0 ]; then
            echo "ERROR: No source distribution (.tar.gz) files found."
            echo "Available files in dist/:"
            ls -la dist/ || echo "dist/ directory is empty or doesn't exist"
            exit 1
          fi
          
          if [ "$WHEEL_COUNT" -eq 0 ]; then
            echo "ERROR: No wheel distribution (.whl) files found."
            echo "Available files in dist/:"
            ls -la dist/ || echo "dist/ directory is empty or doesn't exist"
            exit 1
          fi
          
          echo "âœ… Build successful! Found $TAR_COUNT tar.gz files and $WHEEL_COUNT wheel files."
          
          # Store version for later steps
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create packages directory
        run: |
          cd eapp-python-domain
          mkdir -p packages

      - name: Create package index
        run: |
          cd eapp-python-domain
          
          # Get the actual file names from dist/
          TAR_FILE=$(ls dist/*.tar.gz | head -1)
          WHEEL_FILE=$(ls dist/*.whl | head -1)
          
          echo "Using files: $TAR_FILE and $WHEEL_FILE"
          
          # Use actual filenames for the index (no sanitization needed)
          TAR_BASENAME=$(basename "$TAR_FILE")
          WHEEL_BASENAME=$(basename "$WHEEL_FILE")
          
          echo "Using actual filenames for index: $TAR_BASENAME and $WHEEL_BASENAME"
          
          # Create a simple package index
          echo '<!DOCTYPE html>' > packages/index.html
          echo '<html>' >> packages/index.html
          echo '<head><title>Python Packages</title></head>' >> packages/index.html
          echo '<body>' >> packages/index.html
          echo '<h1>Python Packages</h1>' >> packages/index.html
          echo '<p>Available packages:</p>' >> packages/index.html
          echo '<ul>' >> packages/index.html
          echo "<li><a href=\"https://github.com/50gramx/eapp-python-domain/releases/download/v${{ env.VERSION }}/$TAR_BASENAME\">$TAR_BASENAME</a></li>" >> packages/index.html
          echo "<li><a href=\"https://github.com/50gramx/eapp-python-domain/releases/download/v${{ env.VERSION }}/$WHEEL_BASENAME\">$WHEEL_BASENAME</a></li>" >> packages/index.html
          echo '</ul>' >> packages/index.html
          echo '<p>Install with:</p>' >> packages/index.html
          echo '<pre>pip install --index-url https://raw.githubusercontent.com/50gramx/eapp-python-domain/main/packages/index.html eapp-python-domain</pre>' >> packages/index.html
          echo '</body></html>' >> packages/index.html

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PROTOBUF_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          body: Test release for package hosting system
          draft: false
          prerelease: false
          repo: ${{ github.repository_owner }}/eapp-python-domain

      - name: Upload package files to release
        env:
          GH_TOKEN: ${{ secrets.PROTOBUF_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          cd eapp-python-domain
          
          # Get the actual file names
          TAR_FILE=$(ls dist/*.tar.gz | head -1)
          WHEEL_FILE=$(ls dist/*.whl | head -1)
          
          echo "Uploading $TAR_FILE and $WHEEL_FILE"
          
          # Use GitHub CLI to upload files (more reliable than curl)
          gh release upload v${{ env.VERSION }} "$TAR_FILE" "$WHEEL_FILE" \
            --repo ${{ github.repository_owner }}/eapp-python-domain \
            --clobber

      - name: Commit and push package index
        run: |
          cd eapp-python-domain
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add packages/
          git commit -m "Add package index for v${{ env.VERSION }}" || echo "No changes to commit"
          git push origin master

      - name: Test completion
        run: |
          echo "Test release system completed!"
          echo "Check: https://github.com/50gramx/eapp-python-domain/releases/tag/v${{ env.VERSION }}"
          echo "Index: https://raw.githubusercontent.com/50gramx/eapp-python-domain/main/packages/index.html" 