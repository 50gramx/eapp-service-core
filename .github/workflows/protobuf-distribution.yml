name: Protobuf Distribution

on:
  push:
    branches: [ master ]
    paths: [ 'src/main/proto/**' ]
  workflow_dispatch:

jobs:
  compile-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout System Contracts
        uses: actions/checkout@v4
        with:
          path: system-contracts

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          pip install build setuptools wheel protobuf grpcio-tools

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Node.js dependencies
        run: |
          npm install -g protobuf2ts

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install Java dependencies
        run: |
          # Download protoc compiler
          wget https://github.com/protocolbuffers/protobuf/releases/download/v3.21.12/protoc-3.21.12-linux-x86_64.zip
          unzip protoc-3.21.12-linux-x86_64.zip -d /usr/local
          chmod +x /usr/local/bin/protoc

      - name: Compile Protobuf for Python
        run: |
          cd system-contracts
          mkdir -p ../python-packages/src/eapp_python_domain/ethos
          
          # Compile all .proto files to Python
          for proto_file in $(find src/main/proto -name "*.proto"); do
            protoc --python_out=../python-packages/src/eapp_python_domain/ethos \
                   --proto_path=src/main/proto \
                   "$proto_file"
          done
          
          # Create Python package structure
          cd ../python-packages
          echo 'from setuptools import setup, find_packages' > setup.py
          echo 'setup(' >> setup.py
          echo '    name="eapp-python-domain",' >> setup.py
          echo '    version="0.1.0",' >> setup.py
          echo '    description="Python protobuf client for EAPP system contracts",' >> setup.py
          echo '    packages=find_packages(where="src"),' >> setup.py
          echo '    package_dir={"": "src"},' >> setup.py
          echo '    python_requires=">=3.7",' >> setup.py
          echo '    install_requires=["protobuf>=3.21.0", "grpcio>=1.50.0"],' >> setup.py
          echo ')' >> setup.py
          
          mkdir -p src/eapp_python_domain
          echo '# Python protobuf client package' > src/eapp_python_domain/__init__.py

      - name: Compile Protobuf for Node.js
        run: |
          cd system-contracts
          mkdir -p ../nodejs-packages
          
          # Compile all .proto files to TypeScript
          for proto_file in $(find src/main/proto -name "*.proto"); do
            protobuf2ts "$proto_file" --out ../nodejs-packages
          done
          
          # Create Node.js package structure
          cd ../nodejs-packages
          echo '{' > package.json
          echo '  "name": "eapp-nodejs-domain",' >> package.json
          echo '  "version": "0.1.0",' >> package.json
          echo '  "description": "Node.js protobuf client for EAPP system contracts",' >> package.json
          echo '  "main": "index.js",' >> package.json
          echo '  "types": "index.d.ts",' >> package.json
          echo '  "dependencies": {' >> package.json
          echo '    "protobufjs": "^7.0.0"' >> package.json
          echo '  }' >> package.json
          echo '}' >> package.json

      - name: Compile Protobuf for Java/Kotlin
        run: |
          cd system-contracts
          mkdir -p ../kotlin-packages/src/main/java
          
          # Compile all .proto files to Java
          for proto_file in $(find src/main/proto -name "*.proto"); do
            protoc --java_out=../kotlin-packages/src/main/java \
                   --proto_path=src/main/proto \
                   "$proto_file"
          done
          
          # Create Kotlin package structure
          cd ../kotlin-packages
          echo 'plugins {' > build.gradle.kts
          echo '    kotlin("jvm") version "1.8.0"' >> build.gradle.kts
          echo '    `java-library`' >> build.gradle.kts
          echo '}' >> build.gradle.kts
          echo 'group = "com.ethosverse"' >> build.gradle.kts
          echo 'version = "0.1.0"' >> build.gradle.kts
          echo 'repositories { mavenCentral() }' >> build.gradle.kts
          echo 'dependencies { implementation("com.google.protobuf:protobuf-java:3.21.12") }' >> build.gradle.kts

      - name: Build and Publish Python Package
        env:
          GH_TOKEN: ${{ secrets.PROTOBUF_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          cd python-packages
          
          # Build package
          python -m build
          
          # Create unique version
          VERSION="0.1.0.$(date +%s)"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Create release in python-domain repo
          gh release create v$VERSION \
            --repo ${{ github.repository_owner }}/eapp-python-domain \
            --title "Release v$VERSION" \
            --notes "Python protobuf client package" \
            --draft=false \
            --prerelease=false
          
          # Upload package files
          TAR_FILE=$(ls dist/*.tar.gz | head -1)
          WHEEL_FILE=$(ls dist/*.whl | head -1)
          gh release upload v$VERSION "$TAR_FILE" "$WHEEL_FILE" \
            --repo ${{ github.repository_owner }}/eapp-python-domain \
            --clobber
          
          # Create package index
          mkdir -p packages
          TAR_BASENAME=$(basename "$TAR_FILE")
          WHEEL_BASENAME=$(basename "$WHEEL_FILE")
          
          echo '<!DOCTYPE html>' > packages/index.html
          echo '<html><head><title>Python Packages</title></head><body>' >> packages/index.html
          echo '<h1>Python Packages</h1><ul>' >> packages/index.html
          echo "<li><a href=\"https://github.com/50gramx/eapp-python-domain/releases/download/v$VERSION/$TAR_BASENAME\">$TAR_BASENAME</a></li>" >> packages/index.html
          echo "<li><a href=\"https://github.com/50gramx/eapp-python-domain/releases/download/v$VERSION/$WHEEL_BASENAME\">$WHEEL_BASENAME</a></li>" >> packages/index.html
          echo '</ul></body></html>' >> packages/index.html

      - name: Build and Publish Node.js Package
        env:
          GH_TOKEN: ${{ secrets.PROTOBUF_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          cd nodejs-packages
          
          # Create unique version
          VERSION="0.1.0.$(date +%s)"
          
          # Create release in nodejs-domain repo
          gh release create v$VERSION \
            --repo ${{ github.repository_owner }}/eapp-nodejs-domain \
            --title "Release v$VERSION" \
            --notes "Node.js protobuf client package" \
            --draft=false \
            --prerelease=false
          
          # Create tarball
          tar -czf eapp-nodejs-domain-$VERSION.tar.gz *
          
          # Upload package file
          gh release upload v$VERSION eapp-nodejs-domain-$VERSION.tar.gz \
            --repo ${{ github.repository_owner }}/eapp-nodejs-domain \
            --clobber

      - name: Build and Publish Kotlin Package
        env:
          GH_TOKEN: ${{ secrets.PROTOBUF_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          cd kotlin-packages
          
          # Create unique version
          VERSION="0.1.0.$(date +%s)"
          
          # Create release in kotlin-domain repo
          gh release create v$VERSION \
            --repo ${{ github.repository_owner }}/eapp-kotlin-domain \
            --title "Release v$VERSION" \
            --notes "Kotlin protobuf client package" \
            --draft=false \
            --prerelease=false
          
          # Create JAR file (simplified)
          jar -cf eapp-kotlin-domain-$VERSION.jar -C src/main/java .
          
          # Upload package file
          gh release upload v$VERSION eapp-kotlin-domain-$VERSION.jar \
            --repo ${{ github.repository_owner }}/eapp-kotlin-domain \
            --clobber

      - name: Commit Python Package Index
        run: |
          cd python-packages
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add packages/
          git commit -m "Add package index for v${{ env.VERSION }}" || echo "No changes to commit"
          git push origin master

      - name: Completion
        run: |
          echo "Protobuf distribution completed!"
          echo "Python: https://github.com/50gramx/eapp-python-domain/releases"
          echo "Node.js: https://github.com/50gramx/eapp-nodejs-domain/releases"
          echo "Kotlin: https://github.com/50gramx/eapp-kotlin-domain/releases" 