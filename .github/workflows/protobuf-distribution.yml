name: Protobuf Distribution

on:
  push:
    branches: [ master ]
    paths: [ 'src/main/proto/**' ]
  workflow_dispatch:

jobs:
  compile-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout System Contracts
        uses: actions/checkout@v4
        with:
          path: system-contracts

      - name: Checkout Python Domain
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/eapp-python-domain
          token: ${{ secrets.PROTOBUF_TOKEN }}
          path: python-domain

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install protobuf==4.25.1
          pip install grpcio-tools==1.60.0
          pip install grpcio==1.60.0
          pip install build

      - name: Compile Protobuf for Python
        run: |
          cd system-contracts
          
          # Clean previous generated files
          rm -rf ../python-domain/src/eapp_python_domain/ethos
          mkdir -p ../python-domain/src/eapp_python_domain/ethos
          
          # Use the working approach with grpc_tools.protoc
          python -m grpc_tools.protoc \
            --python_out=../python-domain/src/eapp_python_domain/ethos \
            --grpc_python_out=../python-domain/src/eapp_python_domain/ethos \
            --pyi_out=../python-domain/src/eapp_python_domain/ethos \
            -I src/main/proto \
            $(find src/main/proto -name "*.proto")
          
          # Create __init__.py files
          find ../python-domain/src/eapp_python_domain/ethos -type d -exec touch {}/__init__.py \;

      - name: Build Python Package
        id: build
        run: |
          cd python-domain
          
          # Update version in setup.py (use year.month.short_unique format)
          VERSION="$(date +%Y).$(date +%m).$(date +%s | tail -c 3)"
          sed -i "s/version='[^']*'/version='$VERSION'/" setup.py
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Build package using existing setup.py
          python -m build
          
          # Get file names
          TAR_FILE=$(ls dist/*.tar.gz | head -1)
          WHEEL_FILE=$(ls dist/*.whl | head -1)
          echo "tar-file=$(basename $TAR_FILE)" >> $GITHUB_OUTPUT
          echo "wheel-file=$(basename $WHEEL_FILE)" >> $GITHUB_OUTPUT

      - name: Publish Python Package
        env:
          GH_TOKEN: ${{ secrets.PROTOBUF_TOKEN }}
        run: |
          cd python-domain
          
          # Debug: Check authentication
          echo "Checking GitHub authentication..."
          gh auth status
          
          # Debug: Check repository access
          echo "Checking repository access..."
          gh repo view ${{ github.repository_owner }}/eapp-python-domain
          
          # Create release in python-domain repo
          echo "Creating release v${{ steps.build.outputs.version }}..."
          gh release create v${{ steps.build.outputs.version }} \
            --repo ${{ github.repository_owner }}/eapp-python-domain \
            --title "Release v${{ steps.build.outputs.version }}" \
            --notes "Python protobuf client package" \
            --draft=false \
            --prerelease=false
          
          # Upload package files
          TAR_FILE=$(ls dist/*.tar.gz | head -1)
          WHEEL_FILE=$(ls dist/*.whl | head -1)
          echo "Uploading $TAR_FILE and $WHEEL_FILE..."
          gh release upload v${{ steps.build.outputs.version }} "$TAR_FILE" "$WHEEL_FILE" \
            --repo ${{ github.repository_owner }}/eapp-python-domain \
            --clobber
          
          # Create package index from template
          mkdir -p packages
          cp ../system-contracts/templates/python-package-index.html packages/index.html
          
          # Replace placeholders
          sed -i "s/{{VERSION}}/${{ steps.build.outputs.version }}/g" packages/index.html
          sed -i "s/{{TAR_FILE}}/${{ steps.build.outputs.tar-file }}/g" packages/index.html
          sed -i "s/{{WHEEL_FILE}}/${{ steps.build.outputs.wheel-file }}/g" packages/index.html
          sed -i "s/{{TIMESTAMP}}/$(date -u)/g" packages/index.html

      - name: Commit Python Package Index
        run: |
          cd python-domain
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update protobuf generated code and package index for v${{ steps.build.outputs.version }}" || echo "No changes to commit"
          git push origin master

  compile-dart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout System Contracts
        uses: actions/checkout@v4
        with:
          path: system-contracts

      - name: Checkout Dart Domain
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/eapp-dart-domain
          token: ${{ secrets.PROTOBUF_TOKEN }}
          path: dart-domain

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: '3.1.2'

      - name: Install protobuf compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install Dart protobuf compiler
        run: |
          dart pub global activate protoc_plugin
          export PATH="$PATH":"$HOME/.pub-cache/bin"

      - name: Compile Protobuf for Dart
        run: |
          cd system-contracts
          
          # Clean previous generated files
          rm -rf ../dart-domain/src/eapp_dart_domain/ethos
          mkdir -p ../dart-domain/src/eapp_dart_domain/ethos
          
          # Generate Dart protobuf code using the working approach
          protoc \
            --dart_out=grpc:"../dart-domain/src/eapp_dart_domain/ethos" \
            google/protobuf/timestamp.proto \
            google/protobuf/any.proto \
            -I src/main/proto \
            $(find src/main/proto -name "*.proto")

      - name: Build Dart Package
        id: build
        run: |
          cd dart-domain/src/eapp_dart_domain
          
          # Update version in pubspec.yaml (use year.month.patch format)
          VERSION="$(date +%Y).$(date +%m).$(date +%s | tail -c 3)"
          sed -i "s/version: .*/version: $VERSION/" pubspec.yaml
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Get dependencies
          dart pub get

      - name: Publish Dart Package
        env:
          GH_TOKEN: ${{ secrets.PROTOBUF_TOKEN }}
        run: |
          cd dart-domain/src/eapp_dart_domain
          
          # Create release in dart-domain repo
          gh release create v${{ steps.build.outputs.version }} \
            --repo ${{ github.repository_owner }}/eapp-dart-domain \
            --title "Release v${{ steps.build.outputs.version }}" \
            --notes "Dart protobuf client package" \
            --draft=false \
            --prerelease=false
          
          # Create tarball
          tar -czf eapp-dart-domain-${{ steps.build.outputs.version }}.tar.gz *
          
          # Upload package file
          gh release upload v${{ steps.build.outputs.version }} eapp-dart-domain-${{ steps.build.outputs.version }}.tar.gz \
            --repo ${{ github.repository_owner }}/eapp-dart-domain \
            --clobber
          
          # Create package index from template
          mkdir -p ../packages
          cp ../../system-contracts/templates/dart-package-index.html ../packages/index.html
          
          # Replace placeholders
          sed -i "s/{{VERSION}}/${{ steps.build.outputs.version }}/g" ../packages/index.html
          sed -i "s/{{TAR_FILE}}/eapp-dart-domain-${{ steps.build.outputs.version }}.tar.gz/g" ../packages/index.html
          sed -i "s/{{TIMESTAMP}}/$(date -u)/g" ../packages/index.html

      - name: Commit Dart Changes
        run: |
          cd dart-domain
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update protobuf generated code for v${{ steps.build.outputs.version }}" || echo "No changes to commit"
          git push origin master

  create-central-index:
    needs: [compile-python, compile-dart]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout System Contracts
        uses: actions/checkout@v4

      - name: Create Central Package Index
        run: |
          # Create central package index from template
          mkdir -p packages
          cp templates/central-package-index.html packages/index.html
          
          # Replace timestamp placeholder
          sed -i "s/{{TIMESTAMP}}/$(date -u)/g" packages/index.html

      - name: Completion
        run: |
          echo "Protobuf distribution completed!"
          echo "Python: https://github.com/50gramx/eapp-python-domain/releases"
          echo "Dart: https://github.com/50gramx/eapp-dart-domain/releases" 