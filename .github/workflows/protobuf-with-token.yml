name: Protobuf Distribution (With Token)

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  setup-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Setup Version
        id: version
        run: |
          YEAR=$(date +%y)
          MONTH=$(date +%m)
          BUILD_NUMBER=${{ github.run_number }}
          echo "version=$YEAR.$MONTH.$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "Generated version: $YEAR.$MONTH.$BUILD_NUMBER"

  python-domain:
    runs-on: ubuntu-latest
    needs: setup-version
    steps:
      - name: Checkout system contracts
        uses: actions/checkout@v4
        with:
          path: eapp-system-contracts

      - name: Checkout Python Domain
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/eapp-python-domain
          token: ${{ secrets.PROTOBUF_TOKEN || secrets.GITHUB_TOKEN }}
          path: eapp-python-domain

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install protobuf==4.25.1
          pip install grpcio-tools==1.60.0
          pip install grpcio==1.60.0
          pip install twine

      - name: Generate Python protobuf code
        run: |
          EAPP_PROTO_SRC_DIR="${{ github.workspace }}/eapp-system-contracts/src/main/proto"
          EAPP_PROTO_PYTHON_OUT_DIR="${{ github.workspace }}/eapp-python-domain/src/eapp_python_domain"
          
          echo "Source directory: $EAPP_PROTO_SRC_DIR"
          echo "Output directory: $EAPP_PROTO_PYTHON_OUT_DIR"
          
          # Create output directory if it doesn't exist
          mkdir -p "$EAPP_PROTO_PYTHON_OUT_DIR"
          
          # Generate protobuf code for all files
          find "$EAPP_PROTO_SRC_DIR" -name "*.proto" | head -20 | while read proto_file; do
            echo "Processing: $proto_file"
            python -m grpc_tools.protoc \
              --python_out="$EAPP_PROTO_PYTHON_OUT_DIR" \
              --grpc_python_out="$EAPP_PROTO_PYTHON_OUT_DIR" \
              --pyi_out="$EAPP_PROTO_PYTHON_OUT_DIR" \
              -I "$EAPP_PROTO_SRC_DIR" \
              "$proto_file"
          done
          
          echo "Generated files:"
          find "$EAPP_PROTO_PYTHON_OUT_DIR" -name "*.py" | head -10

      - name: Create __init__.py files
        run: |
          EAPP_PROTO_PYTHON_OUT_DIR="${{ github.workspace }}/eapp-python-domain/src/eapp_python_domain"
          find "$EAPP_PROTO_PYTHON_OUT_DIR" -type d -exec touch {}/__init__.py \;

      - name: Update Python package version
        run: |
          cd ${{ github.workspace }}/eapp-python-domain
          if [ -f "setup.py" ]; then
            sed -i "s/version='[^']*'/version='${{ needs.setup-version.outputs.version }}'/" setup.py
          else
            echo "Creating setup.py..."
            cat > setup.py << EOF
from setuptools import setup, find_packages

setup(
    name='eapp-python-domain',
    version='${{ needs.setup-version.outputs.version }}',
    description='Generated protobuf code for EthosVerse Python domain',
    packages=find_packages(where='src'),
    package_dir={'': 'src'},
    python_requires='>=3.7',
    install_requires=[
        'protobuf>=3.20.0',
        'grpcio>=1.50.0',
    ],
)
EOF
          fi

      - name: Build Python package
        run: |
          cd ${{ github.workspace }}/eapp-python-domain
          python setup.py sdist

      - name: Publish Python package to GitHub Packages
        if: github.ref == 'refs/heads/master'
        run: |
          cd ${{ github.workspace }}/eapp-python-domain
          
          # Configure pypirc for GitHub Packages
          cat > ~/.pypirc << EOF
[distutils]
index-servers = github

[github]
repository = https://github.com/${{ github.repository_owner }}/eapp-python-domain/packages/pypi
username = ${{ github.actor }}
password = ${{ secrets.PROTOBUF_TOKEN || secrets.GITHUB_TOKEN }}
EOF
          
          twine upload -r github dist/*

      - name: Commit and push Python changes
        run: |
          cd ${{ github.workspace }}/eapp-python-domain
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update protobuf generated code - version ${{ needs.setup-version.outputs.version }}" || echo "No changes to commit"
          git push origin master || echo "No changes to push"

  dart-domain:
    runs-on: ubuntu-latest
    needs: setup-version
    steps:
      - name: Checkout system contracts
        uses: actions/checkout@v4
        with:
          path: eapp-system-contracts

      - name: Checkout Dart Domain
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/eapp-dart-domain
          token: ${{ secrets.PROTOBUF_TOKEN || secrets.GITHUB_TOKEN }}
          path: eapp-dart-domain

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1

      - name: Install Dart dependencies
        run: |
          dart pub global activate protoc_plugin
          export PATH="$PATH":"$HOME/.pub-cache/bin"

      - name: Install protobuf compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Generate Dart protobuf code
        run: |
          EAPP_PROTO_SRC_DIR="${{ github.workspace }}/eapp-system-contracts/src/main/proto"
          EAPP_PROTO_DART_OUT_DIR="${{ github.workspace }}/eapp-dart-domain/src/eapp_dart_domain"
          
          echo "Source directory: $EAPP_PROTO_SRC_DIR"
          echo "Output directory: $EAPP_PROTO_DART_OUT_DIR"
          
          # Create output directory if it doesn't exist
          mkdir -p "$EAPP_PROTO_DART_OUT_DIR/lib"
          
          # Generate protobuf code for all files
          find "$EAPP_PROTO_SRC_DIR" -name "*.proto" | head -20 | while read proto_file; do
            echo "Processing: $proto_file"
            protoc \
              --dart_out=grpc:"$EAPP_PROTO_DART_OUT_DIR/lib" \
              -I "$EAPP_PROTO_SRC_DIR" \
              "$proto_file"
          done
          
          echo "Generated files:"
          find "$EAPP_PROTO_DART_OUT_DIR/lib" -name "*.dart" | head -10

      - name: Update Dart package version
        run: |
          cd ${{ github.workspace }}/eapp-dart-domain
          if [ -f "pubspec.yaml" ]; then
            sed -i "s/version: .*/version: ${{ needs.setup-version.outputs.version }}/" pubspec.yaml
          else
            echo "Creating pubspec.yaml..."
            cat > pubspec.yaml << EOF
name: eapp_dart_domain
description: Generated protobuf code for EthosVerse Dart domain
version: ${{ needs.setup-version.outputs.version }}
publish_to: https://dart.pkg.github.com/${{ github.repository_owner }}/

environment:
  sdk: ">=3.0.0 <4.0.0"

dependencies:
  protobuf: ^3.0.0
  grpc: ^3.2.0

dev_dependencies:
  test: ^1.24.0
EOF
          fi

      - name: Build and publish Dart package to GitHub Packages
        if: github.ref == 'refs/heads/master'
        run: |
          cd ${{ github.workspace }}/eapp-dart-domain
          
          # Configure Dart for GitHub Packages
          echo "${{ secrets.PROTOBUF_TOKEN || secrets.GITHUB_TOKEN }}" | dart pub token add https://dart.pkg.github.com/${{ github.repository_owner }}/
          dart pub publish --force --skip-validation

      - name: Commit and push Dart changes
        run: |
          cd ${{ github.workspace }}/eapp-dart-domain
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update protobuf generated code - version ${{ needs.setup-version.outputs.version }}" || echo "No changes to commit"
          git push origin master || echo "No changes to push"

  notify-completion:
    runs-on: ubuntu-latest
    needs: [python-domain, dart-domain]
    if: always()
    steps:
      - name: Notify completion
        run: |
          echo "Protobuf distribution with token completed!"
          echo "Version: ${{ needs.setup-version.outputs.version }}"
          echo "Check individual job logs for details." 