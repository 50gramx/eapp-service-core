/*************************************************************************
*
* AMIT KUMAR KHETAN CONFIDENTIAL
* __________________
*
*  [2017] - [2021] Amit Kumar Khetan
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Amit Kumar Khetan and its suppliers,
* if any.  The intellectual and technical concepts contained
* herein are proprietary to Amit Kumar Khetan
* and its suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Amit Kumar Khetan.
*/

syntax = "proto3";
package elint.services.product.conversation.message.account;

import public "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

import "ethos/elint/entities/account_assistant.proto";
import "ethos/elint/entities/account.proto";
import "ethos/elint/entities/generic.proto";
import "ethos/elint/services/product/identity/account/access_account.proto";

// Service Definitions
service ReceiveAccountMessageService {
  // Receiving RPC's
  rpc ReceiveMessageFromAccountAssistant (MessageFromAccountAssistant) returns (MessageFromAccountAssistantReceived) {
  };
  rpc ReceiveMessageFromAccount (MessageFromAccount) returns (MessageFromAccountReceived) {
  };

  // Syncing RPC's
  rpc SyncAccountAssistantReceivedMessages (elint.services.product.identity.account.AccountServicesAccessAuthDetails) returns (stream AccountAssistantReceivedMessage) {
  }; // TODO: Complete this service // TODO: Handle streaming
  rpc SyncAccountReceivedMessages (elint.services.product.identity.account.AccountServicesAccessAuthDetails) returns (stream SyncAccountReceivedMessagesResponse) {
  }; // TODO: Handle streaming

  // Syncing RPC's for ConnectedAccount
  rpc SyncAccountConnectedAccountReceivedMessages (SyncAccountConnectedAccountReceivedMessagesRequest) returns (stream SyncAccountConnectedAccountReceivedMessagesResponse) {
  }; // TODO: Handle streaming
  // Syncing RPC's for ConnectedAccountAssistant
  rpc SyncAccountConnectedAccountAssistantReceivedMessages (SyncAccountConnectedAccountAssistantReceivedMessagesRequest) returns (stream SyncAccountConnectedAccountAssistantReceivedMessagesResponse) {
  }; // TODO: Handle streaming

  // Messaging RPC's
  rpc ListenForReceivedAccountAssistantMessages (ListenForReceivedAccountAssistantMessagesRequest) returns (ListenForReceivedAccountAssistantMessagesResponse) {
  };
  rpc ListenForReceivedAccountMessages (ListenForReceivedAccountMessagesRequest) returns (ListenForReceivedAccountMessagesResponse) {
  };

  // Speed Messaging RPC's
  rpc ListenForReceivedAccountSpeedMessages (elint.services.product.identity.account.AccountServicesAccessAuthDetails) returns (stream ListenForReceivedAccountSpeedMessagesResponse) {
  }; // TODO: Handle streaming
  rpc ListenForReceivedAccountAssistantSpeedMessages (elint.services.product.identity.account.AccountServicesAccessAuthDetails) returns (stream ListenForReceivedAccountAssistantSpeedMessagesResponse) {};
  // TODO: Complete this service

  // Get Messages
  rpc GetLast24ProductNReceivedMessages (GetLast24ProductNReceivedMessagesRequest) returns (GetLast24ProductNReceivedMessagesResponse) {};


  // Messages Counts
  rpc GetAccountReceivedMessagesCount (elint.services.product.identity.account.AccountServicesAccessAuthDetails) returns (AccountReceivedMessagesCountResponse) {};
  rpc GetAccountAssistantReceivedMessagesCount (elint.services.product.identity.account.AccountServicesAccessAuthDetails) returns (AccountAssistantReceivedMessagesCountResponse) {};

  // Last Message
  rpc GetAccountLastReceivedMessage (GetAccountLastReceivedMessageRequest) returns (GetAccountLastReceivedMessageResponse) {};
  rpc GetAccountAssistantLastReceivedMessage (GetAccountAssistantLastReceivedMessageRequest) returns (GetAccountAssistantLastReceivedMessageResponse) {};

  // CONVERSED ENTITIES
  rpc GetReceivedMessagesAccounts (elint.services.product.identity.account.AccountServicesAccessAuthDetails) returns (GetReceivedMessagesAccountsResponse) {};  // TODO: Verify this service
  rpc GetReceivedMessagesAccountAssistants (elint.services.product.identity.account.AccountServicesAccessAuthDetails) returns (GetReceivedMessagesAccountAssistantsResponse) {};  // TODO: Verify this service
}

// Message Definitions
message MessageFromAccountAssistant {
  string account_id = 1;
  elint.entity.AccountConnectedAccountAssistant connected_account_assistant = 2;
  string message = 3;
  repeated google.protobuf.Any message_source = 4;
  string account_assistant_received_message_id = 5;
}

message MessageFromAccountAssistantReceived {
  bool is_received = 1;
  google.protobuf.Timestamp received_at = 2;
}

message MessageFromAccount {
  string account_id = 1;
  elint.entity.AccountConnectedAccount connected_account = 2;
  string message = 3;
  string account_received_message_id = 4;
}

message MessageFromAccountReceived {
  bool is_received = 1;
  google.protobuf.Timestamp received_at = 2;
}

message SyncAccountReceivedMessagesResponse {
  AccountReceivedMessage account_received_message = 1;
  elint.entity.ResponseMeta response_meta = 2;
}

// Syncing RPC's messages for ConnectedAccount
message SyncAccountConnectedAccountReceivedMessagesRequest {
  elint.services.product.identity.account.AccountServicesAccessAuthDetails access_auth_details = 1;
  elint.entity.AccountConnectedAccount connected_account = 2;
}

message SyncAccountConnectedAccountReceivedMessagesResponse {
  AccountReceivedMessage account_received_message = 1;
  elint.entity.ResponseMeta response_meta = 2;
  double sync_progress = 3;
}

// Syncing RPC's messages for ConnectedAccountAssistant
message SyncAccountConnectedAccountAssistantReceivedMessagesRequest {
  elint.services.product.identity.account.AccountServicesAccessAuthDetails access_auth_details = 1;
  elint.entity.AccountConnectedAccountAssistant connected_account_assistant = 2;
}

message SyncAccountConnectedAccountAssistantReceivedMessagesResponse {
  AccountAssistantReceivedMessage account_assistant_received_message = 1;
  elint.entity.ResponseMeta response_meta = 2;
  double sync_progress = 3;
}


// Messaging RPC's messages
message ListenForReceivedAccountAssistantMessagesRequest {
  elint.services.product.identity.account.AccountServicesAccessAuthDetails access_auth_details = 1;
  elint.entity.AccountConnectedAccountAssistant connected_account_assistant = 2;
  string account_assistant_received_message_id = 3;
}

message ListenForReceivedAccountAssistantMessagesResponse {
  repeated google.protobuf.Any message_source = 3;
  google.protobuf.Timestamp received_at = 4;
  elint.entity.ResponseMeta response_meta = 5;
}

message ListenForReceivedAccountMessagesRequest {
  elint.services.product.identity.account.AccountServicesAccessAuthDetails access_auth_details = 1;
}

message ListenForReceivedAccountMessagesResponse {
  repeated MessageFromAccount messages_from_account = 1;
  elint.entity.ResponseMeta response_meta = 2;
}

message ListenForReceivedAccountSpeedMessagesResponse {
  MessageFromAccount messages_from_account = 1;
  elint.entity.ResponseMeta response_meta = 2;
}

// TODO: Complete this stream message params
message ListenForReceivedAccountAssistantSpeedMessagesResponse {
  MessageFromAccountAssistant message_from_account_assistant = 1;
  elint.entity.ResponseMeta response_meta = 2;
}

message GetLast24ProductNReceivedMessagesRequest {
  elint.services.product.identity.account.AccountServicesAccessAuthDetails access_auth_details = 1;
  int32 product_n = 2;
  elint.entity.MessageEntity message_entity_enum = 3;
  elint.entity.AccountConnectedAccountAssistant connected_account_assistant = 4;
  elint.entity.AccountConnectedAccount connected_account = 5;
}

message GetLast24ProductNReceivedMessagesResponse {
  elint.entity.ResponseMeta response_meta = 1;
  repeated AccountReceivedMessage account_received_messages = 2;
  repeated AccountAssistantReceivedMessage account_assistant_received_messages = 3;
}


message GetAccountLastReceivedMessageRequest {
  elint.services.product.identity.account.AccountServicesAccessAuthDetails access_auth_details = 1;
  string connected_account_id = 2;
}

message GetAccountLastReceivedMessageResponse {
  elint.entity.ResponseMeta response_meta = 1;
  elint.services.product.conversation.message.account.AccountReceivedMessage last_received_message = 2;
}


message GetAccountAssistantLastReceivedMessageRequest {
  elint.services.product.identity.account.AccountServicesAccessAuthDetails access_auth_details = 1;
  string connected_account_assistant_id = 2;
}

message GetAccountAssistantLastReceivedMessageResponse {
  elint.entity.ResponseMeta response_meta = 1;
  elint.services.product.conversation.message.account.AccountAssistantReceivedMessage last_received_message = 2;
}

message GetReceivedMessagesAccountsResponse{
  elint.entity.ResponseMeta response_meta = 1;
  repeated elint.entity.Account received_messages_accounts = 2;
}

message GetReceivedMessagesAccountAssistantsResponse{
  elint.entity.ResponseMeta response_meta = 1;
  repeated elint.entity.AccountAssistant received_messages_account_assistants = 2;
}

// Messaging Messages Definitions
message AccountAssistantReceivedMessage {
  string account_assistant_received_message_id = 1;
  string account_assistant_id = 2;
  string account_assistant_connection_id = 3;
  string message = 4;
  string message_source_space_id = 5;
  string message_source_space_type_id = 6;
  string message_source_space_domain_id = 7;
  int32 message_source_space_domain_action = 8;
  string message_source_space_domain_action_context_id = 9;
  google.protobuf.Timestamp received_at = 10;
}

message AccountReceivedMessage {
  string account_received_message_id = 1;
  string account_id = 2;
  string account_connection_id = 3;
  string message = 4;
  google.protobuf.Timestamp received_at = 5;
}


// Count RPC's messages
message AccountReceivedMessagesCountResponse {
  int32 account_received_messages_count = 1;
  elint.entity.ResponseMeta response_meta = 2;
}

message AccountAssistantReceivedMessagesCountResponse {
  int32 account_assistant_received_messages_count = 1;
  elint.entity.ResponseMeta response_meta = 2;
}
