syntax = "proto3";
package elint.services.product.conversation.message.account.assistant;

import public "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

import "ethos/elint/entities/account_assistant.proto";
import "ethos/elint/services/product/identity/account_assistant/access_account_assistant.proto";

// Service Definitions
service SendAccountAssistantMessageService {
    rpc SendMessageToAccount (MessageForAccount) returns (MessageForAccountSent) {
    };
}

// Message Definitions
message MessageForAccount {
    elint.services.product.identity.account.assistant.AccountAssistantServicesAccessAuthDetails access_auth_details = 1;
    elint.entity.AccountAssistantConnectedAccount connected_account = 2;
    string message = 3;
    repeated google.protobuf.Any message_source = 4;
}

message MessageForAccountSent {
    string account_sent_message_id = 1;
    bool is_sent = 2;
    google.protobuf.Timestamp sent_at = 3;
    google.protobuf.Timestamp received_at = 4;
}

/*
1. Send message to account assistant, with account access
2. If account is connected and fetch the assistant,
*/