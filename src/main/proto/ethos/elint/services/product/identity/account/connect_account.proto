/*************************************************************************
*
* AMIT KUMAR KHETAN CONFIDENTIAL
* __________________
*
*  [2017] - [2021] Amit Kumar Khetan
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Amit Kumar Khetan and its suppliers,
* if any.  The intellectual and technical concepts contained
* herein are proprietary to Amit Kumar Khetan
* and its suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Amit Kumar Khetan.
*/

syntax = "proto3";
package elint.services.product.identity.account;

import "google/protobuf/any.proto";

import "ethos/elint/entities/account.proto";
import "ethos/elint/entities/account_assistant.proto";
import "ethos/elint/entities/generic.proto";
import "ethos/elint/services/product/identity/account/access_account.proto";

// Service Definitions
service ConnectAccountService {

  rpc GetAccountSelfConnectedAccountAssistant (elint.services.product.identity.account.AccountServicesAccessAuthDetails) returns (GetAccountSelfConnectedAccountAssistantResponse) {
  }; // returns self connected account assistant

  rpc GetAllConnectedAssistantsWithBelongingEntity (elint.services.product.identity.account.AccountServicesAccessAuthDetails) returns (stream ConnectedAssistantsWithBelongingEntity) {
  }; // returns list of connected assistants (account assistants except self connected account assistant)

  rpc GetAllConnectedAccountAssistants (elint.services.product.identity.account.AccountServicesAccessAuthDetails) returns (ConnectedAccountAssistants) {
  }; // returns list of connected account assistants except self connected account assistant
  rpc GetAllConnectedAccounts (elint.services.product.identity.account.AccountServicesAccessAuthDetails) returns (ConnectedAccounts) {
  }; // returns list of connected accounts

  rpc GetConnectedAccount (GetConnectedAccountRequest) returns (GetConnectedAccountResponse) {
  }; // returns the connected account if connection exists TODO: Complete this service

  rpc IsAccountConnectionExists (IsAccountConnectionExistsRequest) returns (elint.entity.ResponseMeta) {
  }; // Checks if the account is connected or not

  rpc IsAccountAssistantConnected (IsAccountAssistantConnectedRequest) returns (elint.entity.ResponseMeta) {
  }; // Verifies if the account assistant is connected or not
  rpc IsAccountConnected (IsAccountConnectedRequest) returns (elint.entity.ResponseMeta) {
  }; // Verifies if the account is connected or not

  rpc ParseAccountMobiles (ParseAccountMobilesRequest) returns (ParseAccountMobilesResponse) {
  };

  rpc SyncAccountConnections (SyncAccountConnectionsRequest) returns (SyncAccountConnectionsResponse) {
  };
  rpc ConnectAccount (ConnectAccountRequest) returns (ConnectAccountResponse) {
  };
}

// Message Definitions
enum ConnectedAssistantBelongsTo {
  ACCOUNT = 0;
  ORGANIZATION = 1;
}

message ConnectedAssistantWithBelongingEntity {
  ConnectedAssistantBelongsTo connected_assistant_belongs_to = 1; // returns the entity the assistant connection belongs to
  google.protobuf.Any connected_assistant = 2; // returns the EntityConnectedAssistant
  google.protobuf.Any assistant = 3; // returns the EntityAssistant
  bool is_connected_to_belonging_entity = 4; // returns boolean to state the connection with the entity
  google.protobuf.Any connected_entity = 5; // returns this only if connected to the entity
  google.protobuf.Any belonging_entity_meta = 6; // returns this only if not connected to the entity
  google.protobuf.Any belonging_entity = 7; // returns this only if connected to the entity
}

message GetAccountSelfConnectedAccountAssistantResponse {
  elint.entity.AccountConnectedAccountAssistant connected_account_assistant = 1;
  elint.entity.ResponseMeta response_meta = 2;
}

message ConnectedAssistantsWithBelongingEntity {
  ConnectedAssistantWithBelongingEntity connected_assistant_with_belonging_entity = 1;
  elint.entity.ResponseMeta response_meta = 2;
}

message ConnectedAccountAssistants {
  repeated elint.entity.AccountConnectedAccountAssistant connected_account_assistants = 1;
  elint.entity.ResponseMeta response_meta = 2;
}

message ConnectedAccounts {
  repeated elint.entity.AccountConnectedAccount connected_accounts = 1;
  elint.entity.ResponseMeta response_meta = 2;
}

message GetConnectedAccountRequest {
  elint.services.product.identity.account.AccountServicesAccessAuthDetails access_auth_details = 1;
  string account_id = 2;
}

message GetConnectedAccountResponse {
  elint.entity.AccountConnectedAccount connected_account = 1;
  elint.entity.ResponseMeta response_meta = 2;
}

message IsAccountConnectionExistsRequest {
  elint.services.product.identity.account.AccountServicesAccessAuthDetails access_auth_details = 1;
  string account_id = 2;
}

message IsAccountAssistantConnectedRequest {
  string account_id = 1;
  elint.entity.AccountConnectedAccountAssistant connected_account_assistant = 2;
}

message IsAccountConnectedRequest {
  string account_id = 1;
  elint.entity.AccountConnectedAccount connected_account = 2;
}

message ParseAccountMobilesRequest {
  elint.services.product.identity.account.AccountServicesAccessAuthDetails access_auth_details = 1;
  repeated string connecting_account_mobile_numbers = 2;
}

message ParseAccountMobilesResponse {
  repeated elint.entity.AccountMobile account_mobiles = 1;
  elint.entity.ResponseMeta response_meta = 2;
}


message SyncAccountConnectionsRequest {
  elint.services.product.identity.account.AccountServicesAccessAuthDetails access_auth_details = 1;
  elint.entity.AccountMobile connecting_account_mobile = 2;
}

message SyncAccountConnectionsResponse {
  message ConnectedAccount {
    elint.entity.AccountConnectedAccount connected_account = 1;
    elint.entity.AccountMobile connected_account_mobile = 2;
  }
  ConnectedAccount connected_account = 1;
  elint.entity.ResponseMeta response_meta = 2;
}

message ConnectAccountRequest {
  elint.services.product.identity.account.AccountServicesAccessAuthDetails access_auth_details = 1;
  string connecting_account_id = 2;
}

message ConnectAccountResponse {
  elint.entity.AccountConnectedAccount connected_account = 1;
  elint.entity.ResponseMeta response_meta = 2;
}