syntax = "proto3";

import "ethos/elint/entities/space_service.proto";
import "ethos/elint/collars/DC499999999.proto";
import "ethos/elint/entities/generic.proto";
import "ethos/elint/services/product/service/space_service_domain/access_space_service_domain.proto";

package elint.collars;

// -------------------------------------------------------
// gRPC Service Definition
// -------------------------------------------------------
service DC499999999EPME5000Capabilities {
  rpc Create(AuthWithDeployment) returns (elint.entity.ResponseMeta);
  rpc List(elint.services.product.service.domain.SpaceServiceDomainServicesAccessAuthDetails) returns (RepeatedDC499999999);
  rpc Get(AuthWithCollarID) returns (elint.collars.Deployment);
  rpc Delete(elint.collars.LabelSelector) returns (DeleteResponse);
}

service DC499999999EPME5001Capabilities {}
service DC499999999EPME5002Capabilities {}
service DC499999999EPME5003Capabilities {}
service DC499999999EPME5004Capabilities {}
service DC499999999EPME5005Capabilities {}
service DC499999999EPME5006Capabilities {}
service DC499999999EPME5007Capabilities {}


message AuthWithDeployment {
  elint.services.product.service.domain.SpaceServiceDomainServicesAccessAuthDetails auth = 1;
  elint.collars.Deployment deployment = 2;
}


message RepeatedDC499999999 {
  elint.entity.ResponseMeta meta = 1;
  repeated elint.collars.DC499999999 collars = 2;
}

message AuthWithCollarID {
  elint.services.product.service.domain.SpaceServiceDomainServicesAccessAuthDetails auth = 1;
  string collar_id = 2;
}

message DeleteResponse {
  bool success = 1;                 // Indicates if the operation was successful
  string message = 2;               // Optional message for additional context
}